---
interface Props {
  title: string;
  description?: string;
  image?: string;
  publishedDate?: string;
}

const {
  title,
  description = 'Malaysian Fullstack Web Developer & Father of Two',
  image,
  publishedDate,
} = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = image || new URL('/dark-logo-156.png', Astro.url).href;

const meta = [
  { name: 'title', content: title },
  { name: 'description', content: description },
  { name: 'author', content: 'Oyster Lee' },
  { name: 'robots', content: 'index, nofollow' },
  // Open Graph
  { property: 'og:title', content: title },
  { property: 'og:url', content: Astro.url },
  { property: 'og:site_name', content: 'Oyster Lee' },
  { property: 'og:description', content: description },
  { property: 'og:type', content: !publishedDate ? 'website' : 'article' },
  { property: 'og:image', content: socialImageURL },
  // Twitter
  { property: 'twitter:card', content: 'summary' },
  { property: 'twitter:title', content: title },
  { property: 'twitter:site', content: '@OysteRD3' },
  { property: 'twitter:creator', content: '@OysteRD3' },
  { property: 'twitter:url', content: Astro.url },
  { property: 'twitter:description', content: description },
  { property: 'twitter:image', content: socialImageURL },

  ...(publishedDate
    ? [
        { property: 'article:published_time', content: publishedDate },
        { property: 'article:author', content: 'Oyster Lee' },
      ]
    : []),
] as const;
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<link rel="icon" href="/dark-logo-64.png" type="image/png" />

<link rel="canonical" href={canonicalURL} />

<title>{title}</title>

{meta.map((props, i) => <meta {...props} />)}
